diff --git a/src/base/thread.h b/src/base/thread.h
index 576192e..c2fb739 100644
--- a/src/base/thread.h
+++ b/src/base/thread.h
@@ -59,7 +59,14 @@ class Thread {
 
   template <class Function, class... Args>
   explicit Thread(Function &&f, Args &&...args)
-      : thread_(std::forward<Function>(f), std::forward<Args>(args)...) {}
+#ifndef __EMSCRIPTEN__
+      : thread_(std::forward<Function>(f), std::forward<Args>(args)...)
+#endif
+      {
+#ifdef __EMSCRIPTEN__
+      f(std::forward<Args>(args)...);
+#endif
+    }
 
   ~Thread() {
     if (Joinable()) {
@@ -75,18 +82,32 @@ class Thread {
     if (Joinable()) {
       Join();
     }
+#ifndef __EMSCRIPTEN__
     thread_ = std::move(other.thread_);
+#endif
     return *this;
   }
 
-  bool Joinable() const noexcept { return thread_.joinable(); }
+  bool Joinable() const noexcept {
+#ifdef __EMSCRIPTEN__
+    return true;
+#else
+    return thread_.joinable();
+#endif
+  }
 
-  void Join() { thread_.join(); }
+  void Join() {
+#ifndef __EMSCRIPTEN__
+    thread_.join();
+#endif
+  }
 
+#ifndef __EMSCRIPTEN__
  private:
   // Some toolchains do not support `std::jthread` yet, so we use `std::thread`
   // for now.
   std::thread thread_;
+#endif
 };
 
 // Represents a value that will be available in the future. This class spawns
